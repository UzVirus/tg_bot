// telegram-payment-bot/index.js
const { Telegraf, Markup, session } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const fs = require('fs').promises;
const fsSync = require('fs');
const path = require('path');
require('dotenv').config();

const { t } = require('./i18n');

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(new LocalSession({ database: 'session.json' }).middleware());

// –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const USERS_FILE = path.join(__dirname, 'users.json');
const ADMIN_CONFIG_FILE = path.join(__dirname, 'admin-config.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
let adminConfig;
try {
  adminConfig = require(ADMIN_CONFIG_FILE);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ admin-config.json:', error.message);
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON');
  process.exit(1);
}

const { admins, cardNumber, mainAdminUsername } = adminConfig;

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (!admins || !Array.isArray(admins) || admins.length === 0) {
  console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –º–∞—Å—Å–∏–≤ admins –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  process.exit(1);
}

if (!cardNumber) {
  console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (cardNumber)');
  process.exit(1);
}

if (!mainAdminUsername) {
  console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω username –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ (mainAdminUsername)');
  process.exit(1);
}

// –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
let usersCache = null;
let lastUsersFileModified = 0;

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
async function loadUsers() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
    if (fsSync.existsSync(USERS_FILE)) {
      const stats = await fs.stat(USERS_FILE);
      if (usersCache && stats.mtimeMs <= lastUsersFileModified) {
        return usersCache;
      }
      lastUsersFileModified = stats.mtimeMs;
    }

    if (!fsSync.existsSync(USERS_FILE)) {
      usersCache = [];
      return usersCache;
    }
    
    const data = await fs.readFile(USERS_FILE, 'utf8');
    usersCache = JSON.parse(data);
    return usersCache;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    usersCache = [];
    return usersCache;
  }
}

async function saveUsers(users) {
  try {
    await fs.writeFile(USERS_FILE, JSON.stringify(users, null, 2));
    usersCache = users;
    lastUsersFileModified = Date.now();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    throw error;
  }
}

async function findUser(ctx) {
  const users = await loadUsers();
  return users.find(u => u.telegramId === ctx.from.id);
}

async function ensureUser(ctx) {
  let users = await loadUsers();
  let user = users.find(u => u.telegramId === ctx.from.id);
  
  if (!user) {
    user = {
      telegramId: ctx.from.id,
      firstName: ctx.from.first_name || '',
      lastName: ctx.from.last_name || '',
      username: ctx.from.username || '',
      phone: '',
      apartment: '',
      balance: 0,
      isPaid: false,
      payments: [],
      lang: ''
    };
    users.push(user);
    await saveUsers(users);
  }
  
  return user;
}

function mainMenu(lang) {
  return Markup.keyboard([
    [t(lang, 'btn_profile'), t(lang, 'btn_payment')],
    [t(lang, 'btn_history'), t(lang, 'btn_contact_admin')],
    [t(lang, 'btn_view_payments'), t(lang, 'btn_users')]
  ]).resize();
}

function apartmentKeyboard(lang, selected = []) {
  const buttons = [];

  for (let i = 1; i <= 90; i += 6) {
    const row = [];
    for (let j = i; j < i + 6 && j <= 90; j++) {
      const isSelected = selected.includes(j.toString());
      row.push(Markup.button.callback(
        isSelected ? `‚úÖ ${j}` : `${j}`, 
        `apartment_${j}`
      ));
    }
    buttons.push(row);
  }

  buttons.push([
    Markup.button.callback(t(lang, 'done_n_but'), 'confirm_apartments'),
    Markup.button.callback(t(lang, 'clear_n_but'), 'clear_apartments')
  ]);

  return Markup.inlineKeyboard(buttons);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
function formatMonth(monthIndex, year) {
  const m = (monthIndex + 1).toString().padStart(2, '0');
  return `${year}-${m}`;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureSession(ctx) {
  if (!ctx.session) {
    ctx.session = {};
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  try {
    const user = await ensureUser(ctx);
    
    if (!user.lang) {
      return ctx.reply(t('ru', 'choose_lang'), 
        Markup.inlineKeyboard([
          [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')],
          [Markup.button.callback('üá∫üáø O\'zbekcha', 'lang_uz')]
        ])
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if (!user.phone) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
      ensureSession(ctx);
      ctx.session.awaitingPhone = true;
      
      await ctx.reply(t(user.lang, 'welcome'), 
        Markup.keyboard([
          Markup.button.contactRequest(t(user.lang, 'send_phone_button'))
        ]).oneTime().resize()
      );
    } else if (!user.apartment) {
      // –ï—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –Ω–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      ensureSession(ctx);
      ctx.session.awaitingPhone = false;
      ctx.session.selectingApartments = true;
      ctx.session.apartments = [];
      
      ctx.reply(t(user.lang, 'select_apartments'), apartmentKeyboard(user.lang));
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      ctx.reply(t(user.lang, 'welcome_back'), mainMenu(user.lang));
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (–ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
bot.action(/lang_(ru|uz)/, async (ctx) => {
  try {
    const lang = ctx.match[1];
    const users = await loadUsers();
    const userIndex = users.findIndex(u => u.telegramId === ctx.from.id);
    
    if (userIndex === -1) return;

    users[userIndex].lang = lang;
    await saveUsers(users);

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await ctx.editMessageText(t(lang, 'lang_selected'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = users[userIndex];
    
    if (!user.phone) {
      // –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
      ensureSession(ctx);
      ctx.session.awaitingPhone = true;
      
      await ctx.reply(t(lang, 'welcome'), 
        Markup.keyboard([
          Markup.button.contactRequest(t(lang, 'send_phone_button'))
        ]).oneTime().resize()
      );
    } else if (!user.apartment) {
      // –ï—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –Ω–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã
      ensureSession(ctx);
      ctx.session.awaitingPhone = false;
      ctx.session.selectingApartments = true;
      ctx.session.apartments = [];
      
      await ctx.reply(t(lang, 'select_apartments'), apartmentKeyboard(lang));
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await ctx.reply(t(lang, 'welcome_back'), mainMenu(lang));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞:', error);
    
    // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
      const lang = ctx.match[1];
      await ctx.reply(t(lang, 'welcome_back'), mainMenu(lang));
    } catch (fallbackError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ fallback –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞:', fallbackError);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on('contact', async (ctx) => {
  try {
    const user = await ensureUser(ctx);
    const users = await loadUsers();
    const userIndex = users.findIndex(u => u.telegramId === ctx.from.id);
    
    if (userIndex !== -1) {
      users[userIndex].phone = ctx.message.contact.phone_number;
      await saveUsers(users);
    }

    ensureSession(ctx);
    ctx.session.awaitingPhone = false;
    ctx.session.selectingApartments = true;
    ctx.session.apartments = [];
    
    ctx.reply(t(user.lang, 'select_apartments'), apartmentKeyboard(user.lang));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
bot.hears([/üë§/, /Mening profilim/, /–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å/], async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    const langDisplay = user.lang === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üáø O\'zbekcha';

    const profile = t(user.lang, 'profile_caption', {
      firstName: user.firstName || '‚Äî',
      lastName: user.lastName || '‚Äî',
      apartment: user.apartment || t(user.lang, 'not_specified'),
      phone: user.phone || t(user.lang, 'not_specified'),
      balance: user.balance ?? 0,
      language: langDisplay
    });

    ctx.reply(profile, Markup.inlineKeyboard([
      [Markup.button.callback(t(user.lang, 'text_edit_firstName'), 'edit_firstName')],
      [Markup.button.callback(t(user.lang, 'text_edit_lastName'), 'edit_lastName')],
      [Markup.button.callback(t(user.lang, 'text_edit_apartment'), 'edit_apartment')],
      [Markup.button.callback(t(user.lang, 'text_edit_phone'), 'edit_phone')],
      [Markup.button.callback(t(user.lang, 'text_edit_language'), 'edit_language')]
    ]));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
  }
});

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
bot.action('edit_language', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    const currentLang = user.lang === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üáø O\'zbekcha';
    
    await ctx.editMessageText(
      t(user.lang, 'select_new_language', { current: currentLang }),
      Markup.inlineKeyboard([
        [Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'change_lang_ru')],
        [Markup.button.callback('üá∫üáø O\'zbekcha', 'change_lang_uz')],
        [Markup.button.callback(t(user.lang, 'btn_back'), 'back_to_profile')]
      ])
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
bot.action(/change_lang_(ru|uz)/, async (ctx) => {
  try {
    const newLang = ctx.match[1];
    const users = await loadUsers();
    const userIndex = users.findIndex(u => u.telegramId === ctx.from.id);
    
    if (userIndex === -1) return;

    const oldLang = users[userIndex].lang;
    
    if (oldLang === newLang) {
      await ctx.answerCbQuery(t(newLang, 'same_language_selected'));
      return;
    }

    users[userIndex].lang = newLang;
    await saveUsers(users);

    await ctx.answerCbQuery(t(newLang, 'language_changed_success'));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
    const user = users[userIndex];
    const langDisplay = newLang === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üáø O\'zbekcha';

    const profile = t(newLang, 'profile_caption', {
      firstName: user.firstName || '‚Äî',
      lastName: user.lastName || '‚Äî',
      apartment: user.apartment || t(newLang, 'not_specified'),
      phone: user.phone || t(newLang, 'not_specified'),
      balance: user.balance ?? 0,
      language: langDisplay
    });

    await ctx.editMessageText(profile, Markup.inlineKeyboard([
      [Markup.button.callback(t(newLang, 'text_edit_firstName'), 'edit_firstName')],
      [Markup.button.callback(t(newLang, 'text_edit_lastName'), 'edit_lastName')],
      [Markup.button.callback(t(newLang, 'text_edit_apartment'), 'edit_apartment')],
      [Markup.button.callback(t(newLang, 'text_edit_phone'), 'edit_phone')],
      [Markup.button.callback(t(newLang, 'text_edit_language'), 'edit_language')]
    ]));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
bot.action('back_to_profile', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    const langDisplay = user.lang === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üáø O\'zbekcha';

    const profile = t(user.lang, 'profile_caption', {
      firstName: user.firstName || '‚Äî',
      lastName: user.lastName || '‚Äî',
      apartment: user.apartment || t(user.lang, 'not_specified'),
      phone: user.phone || t(user.lang, 'not_specified'),
      balance: user.balance ?? 0,
      language: langDisplay
    });

    await ctx.editMessageText(profile, Markup.inlineKeyboard([
      [Markup.button.callback(t(user.lang, 'text_edit_firstName'), 'edit_firstName')],
      [Markup.button.callback(t(user.lang, 'text_edit_lastName'), 'edit_lastName')],
      [Markup.button.callback(t(user.lang, 'text_edit_apartment'), 'edit_apartment')],
      [Markup.button.callback(t(user.lang, 'text_edit_phone'), 'edit_phone')],
      [Markup.button.callback(t(user.lang, 'text_edit_language'), 'edit_language')]
    ]));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º
bot.hears([/üìû/, /bog'lanish/, /–°–≤—è–∑–∞—Ç—å—Å—è/], async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;
    
    ctx.reply(t(user.lang, 'text_admin_link') + ' @' + mainAdminUsername);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç
bot.hears([/üßæ/, /tarixi/, /–ò—Å—Ç–æ—Ä–∏—è/], async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    if (!user.payments || user.payments.length === 0) {
      return ctx.reply(t(user.lang, 'no_payments'));
    }

    const history = user.payments.map((p, i) => {
      const date = new Date(p.date);
      const formattedDate = date.toLocaleDateString(user.lang === 'uz' ? 'uz-UZ' : 'ru-RU');
      return `${i + 1}. –ú–µ—Å—è—Ü: ${p.month}\n–°—É–º–º–∞: ${p.amount} ${user.lang === 'uz' ? 'so\'m' : '—Å—É–º'}\n–î–∞—Ç–∞: ${formattedDate}`;
    }).join('\n\n');

    ctx.reply(`${t(user.lang, 'btn_history')}\n\n${history}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã
bot.hears([/üí∏/, /To'lov/, /–û–ø–ª–∞—Ç–∞/], async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    const now = new Date();
    const year = now.getFullYear();

    const allMonths = [];
    for (let m = 0; m < 12; m++) {
      allMonths.push(formatMonth(m, year));
    }

    const buttons = [];
    for (let i = 0; i < allMonths.length; i += 3) {
      const row = allMonths.slice(i, i + 3).map(month =>
        Markup.button.callback(`üìÖ ${month}`, `select_month_${month}`)
      );
      buttons.push(row);
    }

    ctx.reply(t(user.lang, 'select_payment_month', { year }), Markup.inlineKeyboard(buttons));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–ø–ª–∞—Ç—ã:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–ø–ª–∞—Ç
bot.hears([/üìä/, /ko'rish/, /–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/], async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    const users = await loadUsers();
    const monthMap = {};

    users.forEach(u => {
      if (u.payments && u.payments.length > 0) {
        u.payments.forEach(p => {
          if (!monthMap[p.month]) monthMap[p.month] = [];
          monthMap[p.month].push({
            name: `${u.firstName} ${u.lastName}`,
            apartment: u.apartment || '-',
            amount: p.amount,
            date: new Date(p.date).toLocaleDateString(user.lang === 'uz' ? 'uz-UZ' : 'ru-RU')
          });
        });
      }
    });

    const sortedMonths = Object.keys(monthMap).sort();

    if (sortedMonths.length === 0) {
      return ctx.reply(t(user.lang, 'text_not_payments'));
    }

    let response = t(user.lang, 'text_all_payments');
    const currency = user.lang === 'uz' ? 'so\'m' : '—Å—É–º';

    sortedMonths.forEach(month => {
      response += `üìÖ ${month}:\n`;
      const monthTotal = monthMap[month].reduce((sum, p) => sum + p.amount, 0);

      monthMap[month].forEach((p, i) => {
        response += `${i + 1}. ${p.name} (–∫–≤. ${p.apartment}) ‚Äî ${p.amount} ${currency} (${p.date})\n`;
      });

      response += `üßÆ ${user.lang === 'uz' ? 'Jami' : '–í—Å–µ–≥–æ –∑–∞ –º–µ—Å—è—Ü'}: ${monthTotal} ${currency}\n\n`;
    });

    ctx.reply(response);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–ª–∞—Ç:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.hears([/üë•/, /Foydalanuvchilar/, /–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏/], async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    if (!admins.includes(ctx.from.id)) {
      return ctx.reply(t(user.lang, 'users_only_admin'));
    }

    const users = await loadUsers();

    if (users.length === 0) {
      return ctx.reply(t(user.lang, 'no_users'));
    }

    let message = t(user.lang, 'list_users');
    const currency = user.lang === 'uz' ? 'so\'m' : '—Å—É–º';

    users.forEach((u, i) => {
      message += `${i + 1}. ${u.firstName} ${u.lastName} ‚Äî –∫–≤. ${u.apartment || '‚Äî'}\n` +
                 `üìû ${u.phone || '‚Äî'} | üí∞ ${u.balance} ${currency}\n\n`;
    });

    ctx.reply(message);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
bot.action(/select_month_(\d{4}-\d{2})/, async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    const month = ctx.match[1];
    ensureSession(ctx);
    ctx.session.paymentMonth = month;

    const currency = user.lang === 'uz' ? 'so\'m' : '—Å—É–º';
    const customText = user.lang === 'uz' ? 'Boshqa summa' : '–î—Ä—É–≥–∞—è —Å—É–º–º–∞';

    ctx.reply(`${user.lang === 'uz' ? 'Siz tanladingiz' : '–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Å—è—Ü'}: ${month}\n${user.lang === 'uz' ? 'Endi summani tanlang' : '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É'}:`, 
      Markup.inlineKeyboard([
        [Markup.button.callback(`50 000 ${currency}`, 'pay_50000')],
        [Markup.button.callback(`100 000 ${currency}`, 'pay_100000')],
        [Markup.button.callback(customText, 'pay_custom')]
      ])
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã
bot.action(/pay_(\d+)/, async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    if (!ctx.session?.paymentMonth) {
      return ctx.reply(t(user.lang, 'select_month_first'));
    }

    const amount = ctx.match[1];
    ensureSession(ctx);
    ctx.session.paymentAmount = parseInt(amount);
    ctx.session.customPay = false;

    const currency = user.lang === 'uz' ? 'so\'m' : '—Å—É–º';
    ctx.reply(t(user.lang, 'screenshot_prompt', { 
      amount: `${amount} ${currency}`, 
      card: cardNumber 
    }));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã
bot.action('pay_custom', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    if (!ctx.session?.paymentMonth) {
      return ctx.reply(t(user.lang, 'select_month_first'));
    }

    ensureSession(ctx);
    ctx.session.customPay = true;
    ctx.reply(t(user.lang, 'custom_amount_prompt'));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.on('photo', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    const amount = ctx.session?.paymentAmount || 0;
    const month = ctx.session?.paymentMonth;

    if (!amount || !month) {
      return ctx.reply(user.lang === 'uz' ? 
        'Avval oy va to\'lov summasini tanlang.' : 
        '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã.'
      );
    }

    const currency = user.lang === 'uz' ? 'so\'m' : '—Å—É–º';
    const caption = `${user.lang === 'uz' ? 'Foydalanuvchi' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}: ${user.firstName} ${user.lastName} (@${user.username})\n${user.lang === 'uz' ? 'Summa' : '–°—É–º–º–∞'}: ${amount} ${currency}\n${user.lang === 'uz' ? 'Oy' : '–ú–µ—Å—è—Ü'}: ${month}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    const sendPromises = admins.map(adminId => 
      bot.telegram.sendPhoto(adminId, ctx.message.photo.at(-1).file_id, {
        caption,
        reply_markup: {
          inline_keyboard: [[
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_${user.telegramId}_${amount}_${month}` },
            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_${user.telegramId}` }
          ]]
        }
      }).catch(err => console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${adminId}:`, err))
    );

    await Promise.allSettled(sendPromises);
    ctx.reply(t(user.lang, 'screenshot_sent'));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–æ—Ç–æ:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
bot.action(/confirm_(\d+)_(\d+)_(\d{4}-\d{2})/, async (ctx) => {
  try {
    const telegramId = parseInt(ctx.match[1]);
    const amount = parseInt(ctx.match[2]);
    const month = ctx.match[3];

    let users = await loadUsers();
    const userIndex = users.findIndex(u => u.telegramId === telegramId);
    
    if (userIndex === -1) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    users[userIndex].balance += amount;
    users[userIndex].isPaid = true;
    users[userIndex].payments.push({ 
      month, 
      amount, 
      date: new Date().toISOString() 
    });

    await saveUsers(users);

    const user = users[userIndex];
    const currency = user.lang === 'uz' ? 'so\'m' : '—Å—É–º';
    
    bot.telegram.sendMessage(telegramId, 
      t(user.lang, 'confirm_success', { 
        amount: `${amount} ${currency}`, 
        month 
      })
    );
    
    ctx.reply(t(user.lang, 'confirm_done'));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
bot.action(/decline_(\d+)/, async (ctx) => {
  try {
    const telegramId = parseInt(ctx.match[1]);
    const users = await loadUsers();
    const user = users.find(u => u.telegramId === telegramId);
    
    bot.telegram.sendMessage(telegramId, 
      t(user?.lang || 'ru', 'decline_message', { admin: mainAdminUsername })
    );
    
    ctx.reply(t(user?.lang || 'ru', 'decline_done'));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
bot.action('edit_firstName', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    ensureSession(ctx);
    ctx.session.editingField = 'firstName';
    ctx.reply(t(user.lang, 'edit_first_name'));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏:', error);
  }
});

bot.action('edit_lastName', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    ensureSession(ctx);
    ctx.session.editingField = 'lastName';
    ctx.reply(t(user.lang, 'edit_last_name'));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–º–∏–ª–∏–∏:', error);
  }
});

bot.action('edit_apartment', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    const selected = user?.apartment?.split(',').map(a => a.trim()) || [];

    ensureSession(ctx);
    ctx.session.selectingApartments = true;
    ctx.session.apartments = selected;

    ctx.editMessageText(t(user.lang, 'edit_apartment'), 
      apartmentKeyboard(user.lang, selected)
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã:', error);
  }
});

bot.action('edit_phone', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    ensureSession(ctx);
    ctx.session.editingField = 'phone';
    ctx.reply(t(user.lang, 'edit_phone'));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
bot.action(/apartment_(\d+)/, async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user || !ctx.session?.selectingApartments) return;

    const apt = ctx.match[1];
    if (!ctx.session.apartments) ctx.session.apartments = [];

    if (ctx.session.apartments.includes(apt)) {
      ctx.session.apartments = ctx.session.apartments.filter(a => a !== apt);
    } else {
      ctx.session.apartments.push(apt);
    }
    
    ctx.editMessageReplyMarkup(
      apartmentKeyboard(user.lang, ctx.session.apartments).reply_markup
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä
bot.action('confirm_apartments', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    if (!ctx.session?.apartments || ctx.session.apartments.length === 0) {
      return ctx.answerCbQuery(t(user.lang, 'confirm_apartment_empty'));
    }

    const users = await loadUsers();
    const userIndex = users.findIndex(u => u.telegramId === ctx.from.id);
    
    if (userIndex !== -1) {
      users[userIndex].apartment = ctx.session.apartments.join(', ');
      await saveUsers(users);
    }

    ctx.session.selectingApartments = false;
    ctx.session.apartments = [];
    
    ctx.editMessageText(t(user.lang, 'registration_complete'));
    ctx.reply(t(user.lang, 'menu_hint'), mainMenu(user.lang));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä
bot.action('clear_apartments', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    ensureSession(ctx);
    ctx.session.apartments = [];
    ctx.editMessageReplyMarkup(apartmentKeyboard(user.lang).reply_markup);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—á–∏—Å—Ç–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const user = await findUser(ctx);
    if (!user) return;

    // –í–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º—ã
    if (ctx.session?.customPay) {
      const amount = parseInt(ctx.message.text);
      if (isNaN(amount) || amount <= 0) {
        return ctx.reply(t(user.lang, 'invalid_amount'));
      }
      ctx.session.paymentAmount = amount;
      ctx.session.customPay = false;
      const currency = user.lang === 'uz' ? 'so\'m' : '—Å—É–º';
      return ctx.reply(t(user.lang, 'screenshot_prompt', { 
        amount: `${amount} ${currency}`, 
        card: cardNumber 
      }));
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if (ctx.session?.editingField) {
      const field = ctx.session.editingField;
      const users = await loadUsers();
      const userIndex = users.findIndex(u => u.telegramId === ctx.from.id);
      
      if (userIndex !== -1) {
        users[userIndex][field] = ctx.message.text;
        await saveUsers(users);
        ctx.reply(t(user.lang, 'update_success'), mainMenu(user.lang));
        // –í—ã–≤–µ—Å—Ç–∏ –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ
      }
      ctx.session.editingField = null;
      return;
    }
  
    // –í—Å–µ –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    ctx.reply(t(user.lang, 'unknown_command'), mainMenu(user.lang));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  
  try {
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  } catch (replyError) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError);
  }
});

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  bot.stop('SIGTERM');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
}).catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
  process.exit(1);
});

console.log('‚ö° Telegram Payment Bot –∑–∞–ø—É—â–µ–Ω...');